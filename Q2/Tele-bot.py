import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Initialize bot and dispatcher
bot = Bot(token='6650215277:AAHbEMAVj6VW2GG8zimWE08Fw082LM0zT18')
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
SPREADSHEET_ID = '1VeidJ6vxB3lDYFQHNJP2rfF76Yck59wQhggB6NNquSg'
worksheet = client.open_by_key(SPREADSHEET_ID).sheet1

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
log_file = 'app_log.txt'
file_handler = logging.FileHandler(log_file, mode='a')
file_handler.setLevel(logging.INFO)  # –¢—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è

# Create a formatter
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
file_handler.setFormatter(formatter)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.getLogger('').addHandler(file_handler)


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
welcome_message = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –í–≤–µ–¥–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—â–∞–π—Å—è https://t.me/Winter_Mute_ENOENT. –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üòä"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(welcome_message)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def process_message(message: types.Message):
    try:
        username = message.from_user.username
        text = message.text
        timestamp = message.date.strftime('%Y-%m-%d %H:%M:%S')  # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ datetime –≤ —Å—Ç—Ä–æ–∫—É

        data = [username, text, timestamp]
        worksheet.append_row(data)
        await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É)")
    except Exception as e:
        error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ("
        logging.error(f"{error_message}: {str(e)}")
        await message.answer(error_message)

if __name__ == '__main__':
    from aiogram import executor
    loop = asyncio.get_event_loop()
    executor.start_polling(dp, loop=loop, skip_updates=True)
